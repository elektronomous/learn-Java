Every data type has a range of values. The compiler allocates memory space for each variable
or constant according to its data type. Java provides eight primitive data types for numeric values,
characters, and Boolean values.

            Name        Range                                                    Storage Size
            byte        -27 to 27-1 (-128 to 127)                                8-bit signed

            short       -2^15 to 2^15-1 (-32768 to 32767)                        16-bit signed

            int         -2^31 to 2^31-1 (-2147483648 to 2147483647)              32-bit signed

            long        -2^63 to 2^63-1                                          64-bit signed
                        (i.e., -9223372036854775808 to 9223372036854775807)

            float       Negative range: -3.4028235E + 38 to -1.4E -45            32-bit IEEE 754
                        Positive range: 1.4E -45 to 3.4028235E+38
                        6–9 significant digits

            double      Negative range: -1.7976931348623157E+308 to -4.9E -324   64-bit IEEE 754
                        Positive range: 4.9E -324 to 1.7976931348623157E+308
                        15–17 significant digits

IEEE 754 is a standard approved by the Institute of Electrical and Electronics 
Engineers for representing floating-point numbers on computers. The standard 
has been widely adopted. Java uses the 32-bit IEEE 754 for the float type and
the 64-bit IEEE 754 for the double type. The IEEE 754 standard also defines 
special floating-point values, which are listed in Appendix E.

Normally, you should use the double type, because it is more accurate than the float type.

You know how to use the nextDouble() method in the Scanner class to read a double
value from the keyboard. You can also use the methods listed in Table 2.2 to read a number
of the byte, short, int, long, and float type:

            Method          Description
            nextByte()      reads an integer of the byte type.
            nextShort()     reads an integer of the short type.
            nextInt()       reads an integer of the int type.
            nextLong()      reads an integer of the long type.
            nextFloat()     reads a number of the float type.
            nextDouble()    reads a number of the double type.

The operands are the values operated by an operator.

The % operator is often used for positive integers, but it can also be used with negative
integers and floating-point values. The remainder is negative only if the dividend is 
negative. For example, -7 % 3 yields -1, -12 % 4 yields 0, -26 % -8 yields -2, 
and 20 % -13 yields 7.

How usefull the reminder operation: 
If today is Saturday, it will be Saturday again in 7 days. Suppose you and your friends
are going to meet in 10 days. What will be the day in 10 days? You can find that the day
is Tuesday using the following expression:

        Day 6 in a week is Saturday
            |
            |           .----------------- A week has 7 days
            |          /
           (6 + 10) % 7 is 2
                |           \._________ Day 2 in a week is Tuesday
                |                       Note: Day 0 is a week is Sunday
                |
            After 10 days 

The + and - operators can be both unary and binary. A unary operator has only one
operand; a binary operator has two. For example, the – operator in –5 is a unary operator
to negate number 5, whereas the – operator in 4 – 5 is a binary operator for subtracting 5
from 4.

The Math.pow(a, b) method can be used to compute ab. The pow method is defined in
the Math class in the Java API.

        System.out.println(Math.pow(2, 3));     // Displays 8.0
        System.out.println(Math.pow(4, 0.5));   // Displays 2.0
        System.out.println(Math.pow(2.5, 2));   // Displays 6.25
        System.out.println(Math.pow(2.5, –2));  // Displays 0.16