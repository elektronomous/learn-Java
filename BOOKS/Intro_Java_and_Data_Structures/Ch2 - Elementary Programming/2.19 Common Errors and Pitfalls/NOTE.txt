When a variable is assigned a value that is too large (in size) to be stored, it causes
overflow. For example, executing the following statement causes overflow, because the 
largest value that can be stored in a variable of the int type is 2147483647. 2147483648
will be too large for an int value: 
        
        int value = 2147483647 + 1;
        // value will actually be -2147483648

Likewise, executing the following statement also causes overflow, because the smallest 
value that can be stored in a variable of the int type is -2147483648. -2147483649 is too
large in size to be stored in an int variable.
        
        int value = –2147483648 – 1;
        // value will actually be 2147483647

Java does not report warnings or errors on overflow, so be careful when working with 
integers close to the maximum or minimum range of a given type. When a floating-point
number is too small (i.e., too close to zero) to be stored, it causes underflow. Java
approximates it to zero, so normally you don’t need to be concerned about underflow.

A round-off error, also called a rounding error, is the difference between the calculated
approximation of a number and its exact mathematical value. For example, 1/3 is 
approximately 0.333 if you keep three decimal places, and is 0.3333333 if you keep seven
decimal places. Since the number of digits that can be stored in a variable is limited,
round-off errors are inevitable. Calculations involving floating-point numbers are 
approximated because these numbers are not stored with complete accuracy. For example,

        System.out.println(1.0 - 0.1 - 0.1 - 0.1 - 0.1 - 0.1);

displays 0.5000000000000001, not 0.5, and
        
        System.out.println(1.0 - 0.9);

displays 0.09999999999999998, not 0.1. Integers are stored precisely. Therefore, 
calculations with integers yield a precise integer result.