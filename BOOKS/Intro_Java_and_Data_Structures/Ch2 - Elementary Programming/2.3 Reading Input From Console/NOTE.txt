you can use the Scanner class for console input. Java uses System.out to refer to the 
standard output device, and System.in to the standard input device. By default, the output
device is the display monitor, and the input device is the keyboard. To perform console 
output, you simply use the println method to display a primitive value or a string to the
console. To perform console input, you need to use the Scanner class to create an object to
read input from System.in, as follows:

        Scanner input = new Scanner(System.in);

the whole line Scanner input = new Scanner(System.in) creates a Scanner object and assigns
its reference to the variable input. An object may invoke its methods. To invoke a method 
on an object is to ask the object to perform a task. You can invoke the nextDouble() method
to read a double value as follows:

        double radius = input.nextDouble();

This statement reads a number from the keyboard and assigns the number to radius.

ComputeAreaWithConsoleInput.java:
Note the import statement can be omitted if you replace Scanner by java.util.Scanner in line
6. Line 9 displays a string "Enter a number for radius: " to the console. This is known as a
prompt, because it directs the user to enter an input.

There are two types of import statements: specific import and wildcard import. The specific
import specifies a single class in the import statement. For example, the following 
statement imports Scanner from the package java.util:

        import java.util.Scanner;

The wildcard import imports all the classes in a package by using the asterisk as the 
wildcard. For example, the following statement imports all the classes from the package 
java.util.
        
        import java.util.*;

The information for the classes in an imported package is not read in at compile time or
runtime unless the class is used in the program. The import statement simply tells the 
compiler where to locate the classes. There is no performance difference between a specific
import and a wildcard import declaration.

Most of the programs in the early chapters of this book perform three steps— input, process,
and output—called IPO. Input is receiving input from the user; process is producing results
using the input; and output is displaying the results.

If you use an IDE such as Eclipse or NetBeans, you will get a warning to ask you to close
the input for preventing a potential resource leak. Ignore the warning for the time being
because the input is automatically closed when your program is terminated. In this case,
there will be no resource leaking.