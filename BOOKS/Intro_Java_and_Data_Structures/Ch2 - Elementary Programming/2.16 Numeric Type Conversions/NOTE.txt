If an integer and a floating-point number are involved in a binary operation,
Java automatically converts the integer to a floating-point value. Therefore,
3 * 4.5 is the same as 3.0 * 4.5.

You can always assign a value to a numeric variable whose type supports a larger range
of values; thus, for instance, you can assign a long value to a float variable. You cannot,
however, assign a value to a variable of a type with a smaller range unless you use type
casting.

Casting is an operation that converts a value of one data type into a value of another
data type. Casting a type with a small range to a type with a larger range is known as 
widening a type. Casting a type with a large range to a type with a smaller range is known
as narrowing a type. Java will automatically widen a type, but you must narrow a type
explicitly

The syntax for casting a type is to specify the target type in parentheses, followed by the
variableâ€™s name or the value to be cast. For example, the following statement

        System.out.println((int)1.7);

displays 1. When a double value is cast into an int value, the fractional part is truncated.
The following statement

        System.out.println((double)1 / 2);

displays 0.5, because 1 is cast to 1.0 first, then 1.0 is divided by 2. However, the statement

        System.out.println(1 / 2);

displays 0, because 1 and 2 are both integers and the resulting value should also be an integer.

Casting is necessary if you are assigning a value to a variable of a smaller type range, such
as assigning a double value to an int variable. A compile error will occur if casting is not
used in situations of this kind. However, be careful when using casting, as loss of information
might lead to inaccurate results.

In Java, an augmented expression of the form x1 op= x2 is implemented as x1 = (T)(x1 op x2),
where T is the type for x1. Therefore, the following code is correct:

        int sum = 0;
        sum += 4.5; // sum becomes 4 after this statement

sum += 4.5 is equivalent to sum = (int)(sum + 4.5).

The program in SalesTax.java displays the sales tax with two digits after the decimal point.

Note the expression (int)(tax * 100) / 100.0 rounds down tax to two decimal places. If tax is
3.456, (int)(tax * 100) / 100.0 would be 3.45. Can it be rounded up to two decimal places? 
Note any double value x can be rounded up to an integer using (int)(x + 0.5). Thus, tax can 
be rounded up to two decimal places using (int)(tax * 100 + 0.5) / 100.0.