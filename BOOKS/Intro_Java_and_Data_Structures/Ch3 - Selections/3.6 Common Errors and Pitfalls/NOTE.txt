As discussed in Common Error 3 in Section 2.19, floating-point numbers have a limited 
precision and calculations; involving floating-point numbers can introduce round-off errors.
Therefore, equality test of two floating-point values is not reliable. For example, you expect
the following code to display true, but surprisingly, it displays false:
        
        double x = 1.0 − 0.1 − 0.1 − 0.1 − 0.1 − 0.1;
        System.out.println(x == 0.5);

Here, x is not exactly 0.5, but is 0.5000000000000001. You cannot reliably test equality
of two floating-point values. However, you can compare whether they are close enough by
testing whether the difference of the two numbers is less than some threshold. That is, two
numbers x and y are very close if | x - y | < e, for a very small value, e. e, a Greek letter
pronounced "epsilon", is commonly used to denote a very small value. Normally, you set e to
10^-14 for comparing two values of the double type, and to 10^-7 for comparing two values of
the float type. For example, the following code
       
        final double EPSILON = 1E−14;
        double x = 1.0 − 0.1 − 0.1 − 0.1 − 0.1 − 0.1;
        if (Math.abs(x − 0.5) < EPSILON)
            System.out.println(x + " is approximately 0.5");

will display
        
        0.5000000000000001 is approximately 0.5.

Often, new programmers write the duplicate code in different cases that should be combined
in one place. For example, the highlighted code in the following statement is duplicated:
        
        if (inState) {
            tuition = 5000;
            System.out.println("The tuition is " + tuition);
        }
        else {
            tuition = 15000;
            System.out.println("The tuition is " + tuition);
        }

This is not an error, but it should be better written as follows:

        if (inState) {
            tuition = 5000;
        }
        else {
            tuition = 15000;
        }

        System.out.println("The tuition is " + tuition);

The new code removes the duplication and makes the code easy to maintain, because you
only need to change in one place if the print statement is modified.